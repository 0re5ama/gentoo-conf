diff --git a/DOCS/man/options.rst b/DOCS/man/options.rst
index 97f84c6..afec85a 100644
--- a/DOCS/man/options.rst
+++ b/DOCS/man/options.rst
@@ -689,6 +689,15 @@ Video
 
     This option is disabled if the ``--no-keepaspect`` option is used.
 
+``--minimum-scale=<factor>``
+    Disable scaling of the video if the scaling amount is less than the option,
+    expressed as a percentage. For example, setting it to 5 would skip scaling
+    the video if it's within 5% of the destination size. This can be used to
+    avoid scaling videos if they're only a few pixels away from the display
+    size, preventing subtle discontinuities, distortions and performance loss.
+
+    This works exactly like ``--video-unscaled`` if scaling gets disabled.
+
 ``--video-pan-x=<value>``, ``--video-pan-y=<value>``
     Moves the displayed video rectangle by the given value in the X or Y
     direction. The unit is in fractions of the size of the scaled video (the
diff --git a/options/options.c b/options/options.c
index 4352b6c..ec9d416 100644
--- a/options/options.c
+++ b/options/options.c
@@ -440,6 +440,7 @@ const m_option_t mp_opts[] = {
     OPT_FLOATRANGE("video-align-x", vo.align_x, 0, -1.0, 1.0),
     OPT_FLOATRANGE("video-align-y", vo.align_y, 0, -1.0, 1.0),
     OPT_FLAG("video-unscaled", vo.unscaled, 0),
+    OPT_FLOATRANGE("minimum-scale", vo.minimum_scale, 0, 0, 100.0),
     OPT_FLAG("force-rgba-osd-rendering", force_rgba_osd, 0),
     OPT_CHOICE_OR_INT("video-rotate", video_rotate, 0, 0, 359,
                       ({"no", -1})),
diff --git a/options/options.h b/options/options.h
index 488823c..c201299 100644
--- a/options/options.h
+++ b/options/options.h
@@ -27,6 +27,7 @@ typedef struct mp_vo_opts {
     float pan_x, pan_y;
     float align_x, align_y;
     int unscaled;
+    float minimum_scale;
 
     struct m_geometry geometry;
     struct m_geometry autofit;
diff --git a/video/out/aspect.c b/video/out/aspect.c
index 2d25bbd..7dac3d1 100644
--- a/video/out/aspect.c
+++ b/video/out/aspect.c
@@ -16,6 +16,7 @@
  */
 
 /* Stuff for correct aspect scaling. */
+#include "math.h"
 #include "aspect.h"
 #include "vo.h"
 #include "common/msg.h"
@@ -155,11 +156,17 @@ void mp_get_src_dst_rects(struct mp_log *log, struct mp_vo_opts *opts,
         aspect_calc_panscan(log, opts, src_w, src_h, src_dw, src_dh,
                             window_w, window_h, monitor_par,
                             &scaled_width, &scaled_height);
-        src_dst_split_scaling(src_w, window_w, scaled_width, opts->unscaled,
+        // Skip scaling if the ratio is not large enough
+        float dw = fabs(1.0 - ((float)scaled_width / src_w)),
+              dh = fabs(1.0 - ((float)scaled_height / src_h));
+        bool unscaled = opts->unscaled ||
+                        100*dw < opts->minimum_scale ||
+                        100*dh < opts->minimum_scale;
+        src_dst_split_scaling(src_w, window_w, scaled_width, unscaled,
                               opts->zoom, opts->align_x, opts->pan_x,
                               &src.x0, &src.x1, &dst.x0, &dst.x1,
                               &osd.ml, &osd.mr);
-        src_dst_split_scaling(src_h, window_h, scaled_height, opts->unscaled,
+        src_dst_split_scaling(src_h, window_h, scaled_height, unscaled,
                               opts->zoom, opts->align_y, opts->pan_y,
                               &src.y0, &src.y1, &dst.y0, &dst.y1,
                               &osd.mt, &osd.mb);
